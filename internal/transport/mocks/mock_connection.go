// Code generated by MockGen. DO NOT EDIT.
// Source: erlang-solutions.com/cortex_agent/internal/transport (interfaces: Connection)
//
// Generated by this command:
//
//	mockgen -destination=internal/transport/mocks/mock_connection.go -package=mocks erlang-solutions.com/cortex_agent/internal/transport Connection
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// BinaryInput mocks base method.
func (m *MockConnection) BinaryInput() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryInput")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// BinaryInput indicates an expected call of BinaryInput.
func (mr *MockConnectionMockRecorder) BinaryInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryInput", reflect.TypeOf((*MockConnection)(nil).BinaryInput))
}

// BinaryOutput mocks base method.
func (m *MockConnection) BinaryOutput() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryOutput")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// BinaryOutput indicates an expected call of BinaryOutput.
func (mr *MockConnectionMockRecorder) BinaryOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryOutput", reflect.TypeOf((*MockConnection)(nil).BinaryOutput))
}

// CheckHealth mocks base method.
func (m *MockConnection) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockConnectionMockRecorder) CheckHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockConnection)(nil).CheckHealth), ctx)
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// SendPayload mocks base method.
func (m *MockConnection) SendPayload(payload any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayload", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPayload indicates an expected call of SendPayload.
func (mr *MockConnectionMockRecorder) SendPayload(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayload", reflect.TypeOf((*MockConnection)(nil).SendPayload), payload)
}

// Stderr mocks base method.
func (m *MockConnection) Stderr() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockConnectionMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockConnection)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockConnection) Stdin() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockConnectionMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockConnection)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockConnection) Stdout() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockConnectionMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockConnection)(nil).Stdout))
}
